Modeling:
    ✔ Relation User 1:n Booking; @done(23-11-06 22:58)
    ✔ Relation Booking 1:1 Room; @done(23-11-06 23:52)
    ✔ Relation Hotel n:1 Room; @done(23-11-06 23:58)

CRUDS:
    User:
        ✔ Controller; @done(23-11-06 23:59)
        ✔ Service; @done(23-11-06 23:59)
        ✔ Repository; @done(23-11-06 23:59)
        ✔ Mapper; @done(23-11-06 23:59)
    Booking:
        ✔ Controller; @done(23-11-06 23:59)
        ✔ Service; @done(23-11-06 23:59)
        ✔ Repository; @done(23-11-06 23:59)
        ✔ Mapper; @done(23-11-06 23:59)
    Room:
        ✔ Controller; @done(23-11-06 23:59)
        ✔ Service; @done(23-11-06 23:59)
        ✔ Repository; @done(23-11-06 23:59)
        ✔ Mapper; @done(23-11-06 23:59)
    Hotel:
        ✔ Controller; @done(23-11-06 23:59)
        ✔ Service; @done(23-11-06 23:59)
        ✔ Repository; @done(23-11-06 23:59)
        ✔ Mapper; @done(23-11-06 23:59)

    LAST ERROR:
        ✔ 2023-11-08T21:39:50.475-03:00  WARN 6284 --- [nio-8080-exec-3] .w.s.m.s.DefaultHandlerExceptionResolver : Resolved [org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type 'application/octet-stream' is not supported] @done(23-11-22 00:26)
    
    CREATING ROOM SAGA:
        ✔ First: RoomDTO - hotel attribute; @done(23-11-23 22:22)
        ✔ Second: Hotel Model - all; @done(23-11-23 22:22)
        ✔ Third: Room Model - all too; @done(23-11-23 22:22)
        ✔ Fourth: Room Service is rotten!!! Fix it! @done(23-11-23 22:22)

    CREATING BOOKING SAGA:
        ✔ Create a new booking; @done(23-11-23 23:50)
        ✔ The userId and RoomIds are null. buaaaaaaa! @done(23-11-28 22:12)

The To Do:
    ✔ Fix the User creation - set profile as 'user' @done(23-11-28 22:12)

My To Do:
    ✔ Relacionar tabelas! @done(23-11-07 00:00)

    ---------------- Project 1/4 is done! ----------------

Project Main Features:
    ✔ Search Hotels; - [Hotel] @done(23-11-30 00:26)
        ✔ Add toLowerCase(); @done(23-11-30 00:26)

    ✔ Check Hotel details; - [Hotel] @done(23-11-30 00:28)
    ✔ Make a reservation - [Booking, Hotel] @done(23-11-30 00:29)
    ✔ Check user reservations - [User, Booking] @done(23-11-30 00:29)

Features:
    Hotel Search:
        ✔ Filter Hotels - neighborhood | check_in | check_out | Rooms; [Hotels, Rooms] @done(23-11-30 00:29)
    Hotel Info:
        ✔ Info about hotel; [Hotels] @done(23-11-30 00:29)
    Booking:
        ✔ How many rooms? [Booking, Rooms] @done(23-11-30 00:29)
        ✔ Payment info; [Booking] @done(23-11-30 00:37)
        ✔ Unique code to reservation; [Booking] @done(23-11-30 00:43)
    User:
        ✔ Booking history; [User, Booking] @done(23-11-30 01:00)
            ✔ Add attribute isCanceled to entity; @done(23-11-30 00:47)
            ✔ In GetUserById return all the resevations[isCanceled = true | false]; @done(23-11-30 01:37)

    ---------------- Project 2/4 is done! ----------------

Next steps:
    
    User:
        ✔ Deadline for cancellation; [User, Booking] @done(23-11-30 23:19)
        ✔ Decorator currentUserLogged? @done(23-11-30 23:24)
            
    Room:
        ✔ Room Availability; @done(23-11-30 22:52)
        note -> O sistema deve retornar uma lista de hotéis disponíveis com base nos critérios de pesquisa
        ✔ Search By Availability; @done(23-11-30 23:00)

    Hotel:
        ✔ Search Hotels; @done(23-11-30 23:06)
        note -> I'm only allowing search by Hotel name and address, at least by now...
    
    ---------------- Project 3/4 is done! ----------------

    Spring Security:
        ✔ Spring Security - User login - Auth; @done(24-04-08 12:30)
            ✔ Continue with this video -> https://www.youtube.com/watch?v=5w-YCcOjPD0; @done(24-04-08 12:30)
                ✔ Install dependencies; @done(24-03-26 13:26)
                ✔ Model User Entity; @done(24-04-08 12:30)
                ✔ Finished! Auth implemented! @done(24-04-08 12:30)
    
    Swagger Docs:
        API documentation: 
            ✔ Add to controllers Tag annotation; @done(24-03-22 17:45)
            ✔ Describe each endpoint; @done(24-03-26 12:59)
            ✔ Users; @done(24-03-25 12:51)
            ✔ Hotels; @done(24-03-25 12:51)
            ✔ Rooms; @done(24-03-26 12:59)
            ✔ Bookings; @done(24-03-26 12:59)
            ✔ Health; @done(24-03-25 12:51)
        Routes:
            ☐ Organize routes to swagger - each entity with your own feature!
                ☐ Users;
                ☐ Hotels;
                ☐ Rooms;
                ☐ Bookings;
    
    ☐ Consertar o readme: ending date
    ☐ atualizar o postman do repositório
    ☐ Add os links de deploy e swagger
    
    Deploys:
        ☐ Github repository;
        ☐ Railway;
        ☐ Link to swagger;
        ☐ Insomnia archive;
        ☐ Readme;
        ☐ ToDo file;